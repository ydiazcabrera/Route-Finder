@{
    Layout = null;
    ViewBag.Title = "RouteMap";
    string gMaps = ConfigReaderDAL.ReadSetting("gmaps_key");
}

<head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <title>Simple Polylines</title>
    <style>
        /* Always set the map height explicitly to define the size of the div
                * element that contains the map. */
        #map {
            height: 70%;
        }
        /* Optional: Makes the sample page fill the window. */
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
    </style>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("Application name", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("Home", "Index", "Home")</li>
                    <li>@Html.ActionLink("About", "About", "Home")</li>
                    <li>@Html.ActionLink("Contact", "Contact", "Home")</li>
                </ul>
            </div>
        </div>
    </div>
    <div id="map"></div>
    <script>

        var sensors = @Html.Raw(ViewBag.Sensors);

        function initMap() {
            //Create a new map
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 12,
                center: @Html.Raw(ViewBag.MapCenter),
                mapTypeId: 'terrain'
            });

            // Holds the route coordinates in the correct format to be displayed on the map when used in flightPath
            var routeCoordinates = @Html.Raw(ViewBag.Route);

            //Create a line from the routeCoordinates
            var routePath = new google.maps.Polyline({
                path: routeCoordinates,
                geodesic: true,
                strokeColor: '#FF0000',
                strokeOpacity: 1.0,
                strokeWeight: 2
            });

            //Displays the sensors that were passed in as "ViewBag.Markers"
            for (i = 0; i < sensors.length; i++) {
                var data = sensors[i]
                var myLatlng = new google.maps.LatLng(data.lat, data.lng);
                var marker = new google.maps.Marker({
                    //opacity: 0,
                    labelAnchor: { x: 0, y: 30 },
                    position: myLatlng,
                    map: map,
                    title: data.title,
                    scaledSize: new google.maps.Size(50, 50),
                    icon: data.aqi/*'http://maps.google.com/mapfiles/kml/pal4/icon57.png'*/,
                    label: data.aqi,
                });

                if (data.aqi >= 151 && data.aqi <= 200) {
                    var sensorBuffer = new google.maps.Circle({
                        strokeColor: '#FF0000',
                        strokeOpacity: 0.8,
                        strokeWeight: 1,
                        fillColor: '#FF0000',
                        fillOpacity: 0.35,
                        map: map,
                        center: myLatlng,
                        radius: 300,
                        label: data.name,
                    });
                }
                else if (data.aqi >= 101 && data.aqi <= 150) {
                    var sensorBuffer = new google.maps.Circle({
                        strokeColor: '#E17E00',
                        strokeOpacity: 0.8,
                        strokeWeight: 1,
                        fillColor: '#E17E00',
                        fillOpacity: 0.35,
                        map: map,
                        center: myLatlng,
                        radius: 300,
                        label: data.name,
                    });
                }
                else if (data.aqi >= 51 && data.aqi <= 100)
                {
                    var sensorBuffer = new google.maps.Circle({
                        strokeColor: '#E1E100',
                        strokeOpacity: 0.8,
                        strokeWeight: 1,
                        fillColor: '#E1E100',
                        fillOpacity: 0.35,
                        map: map,
                        center: myLatlng,
                        radius: 300,
                        label: data.name,
                    });
                }
                else if (data.aqi <= 50) {
                    var sensorBuffer = new google.maps.Circle({
                        strokeColor: '#00E400',
                        strokeOpacity: 0.8,
                        strokeWeight: 1,
                        fillColor: '#00E400',
                        fillOpacity: 0.35,
                        map: map,
                        center: myLatlng,
                        radius: 300,
                        label: data.name,
                    });
                }


            }

            routePath.setMap(map);
        }

    </script>

    <!--Legend Styling-->
    <style type='text/css'>
        .my-legend .legend-title {
            text-align: left;
            margin-bottom: 5px;
            font-weight: bold;
            font-size: 90%;
        }

        .my-legend .legend-scale ul {
            margin: 0;
            margin-bottom: 5px;
            padding: 0;
            float: left;
            list-style: none;
        }

            .my-legend .legend-scale ul li {
                font-size: 80%;
                list-style: none;
                margin-left: 0;
                line-height: 18px;
                margin-bottom: 2px;
            }

        .my-legend ul.legend-labels li span {
            display: block;
            float: left;
            height: 16px;
            width: 30px;
            margin-right: 5px;
            margin-left: 0;
            border: 1px solid #999;
        }

        .my-legend .legend-source {
            font-size: 70%;
            color: #999;
            clear: both;
        }

        .my-legend a {
            color: #777;
        }
    </style>
    <div class="row">
        <div class="col-md-2">
            <div class="btn-group" data-toggle="buttons">
                <label class="btn btn-primary active focus">
                    <input type="radio" name="modeOfT" id="walk" value="pedestrian" onclick="setWalkChecked()" checked> Walk
                </label>
                <label class="btn btn-primary">
                    <input type="radio" name="modeOfT" id="bike" value="bicycle" onclick="setBikeChecked()"> Bike
                </label>
            </div>
        </div>
    </div>
    <div class='my-legend'>
        <div class='legend-title'>AQI Index</div>
        <div class='legend-scale'>
            <ul class='legend-labels'>
                <li><span style='background:#00E400;'></span>Good</li>
                <li><span style='background:#E1E100;'></span>Moderate</li>
                <li><span style='background:#E17E00;'></span>Unhealthy for Sensitive Groups</li>
                <li><span style='background:#FF0000;'></span>Unhealthy</li>
                <li><span style='background:#8F3F97;'></span>Very Unhealthy</li>
            </ul>
        </div>
        <div class='legend-source'>Source: <a href="#link to source">Name of source</a></div>
    </div>


    @*<div>
            <img src="https://mde.maryland.gov/programs/Air/AirQualityMonitoring/PublishingImages/Widget/AQI.png" alt="Alternate Text" />
        </div>*@
    <script async defer
            src='https://maps.googleapis.com/maps/api/js?key=@gMaps&callback=initMap'>
    </script>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
</body>
