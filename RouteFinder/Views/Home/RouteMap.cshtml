@*@using RouteFinder.Models*@
@model RouteFinder.Models.RouteViewModel

@{
    Layout = null;
    ViewBag.Title = "RouteMap";
    string gMaps = ConfigReaderDAL.ReadSetting("gmaps_key");
    string selectedModeOfTransportation = (string)Session["ModeOfTransportation"];
    string safeRoute = "";
    string fastRoute = "";

    if ( selectedModeOfTransportation == "pedestrian")
    {
        safeRoute = Model.SafeWalkRoute.RouteCoordinatesString;
        fastRoute = Model.FastWalkRoute.RouteCoordinatesString;
    }
    else
    {
        safeRoute = Model.SafeBikeRoute.RouteCoordinatesString;
        fastRoute = Model.FastBikeRoute.RouteCoordinatesString;
    }
}


<head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <title>Simple Polylines</title>
    <style>
        /* Always set the map height explicitly to define the size of the div
                * element that contains the map. */
        #map {
            height: 70%;
        }
        /* Optional: Makes the sample page fill the window. */
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
    </style>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("Application name", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("Home", "Index", "Home")</li>
                    <li>@Html.ActionLink("About", "About", "Home")</li>
                    <li>@Html.ActionLink("Contact", "Contact", "Home")</li>
                </ul>
            </div>
        </div>
    </div>
    <div id="map"></div>
    <script>

        var sensors = @Html.Raw(ViewBag.Sensors) //ToDo - Change this to come in from ViewModel

        function initMap() {
            //Create a new map
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 12,
                center: @Html.Raw(ViewBag.MapCenter),
                mapTypeId: 'terrain'
            });

            // Holds the route coordinates in the correct format to be displayed on the map when used in flightPath
            var routeCoordinates = @Html.Raw(safeRoute);
            var fastestCoordinates = @Html.Raw(fastRoute);

            //Create a line from the routeCoordinates
            var routePath = new google.maps.Polyline({
                path: routeCoordinates,
                geodesic: true,
                strokeColor: '#5600FF',
                strokeOpacity: .5,
                strokeWeight: 3
            });

            //Create a line from the fastestRouteCoordinates
            var fastRoutePath = new google.maps.Polyline({
                path: fastestCoordinates,
                geodesic: true,
                strokeColor: '#FFDB00',
                strokeOpacity: .5,
                strokeWeight: 3
            });


            //Displays the sensors that were passed in as "ViewBag.Markers"
            for (i = 0; i < sensors.length; i++) {
                var data = sensors[i]
                var myLatlng = new google.maps.LatLng(data.lat, data.lng);
                var north = sensors[i].north;
                var south = sensors[i].south;
                var east = sensors[i].east;
                var west = sensors[i].west;
                var marker = new google.maps.Marker({
                    //opacity: 0,
                    labelAnchor: { x: 0, y: 30 },
                    position: myLatlng,
                    map: map,
                    title: data.title,
                    scaledSize: new google.maps.Size(50, 50),
                    icon: data.aqi/*'http://maps.google.com/mapfiles/kml/pal4/icon57.png'*/,
                    label: data.aqi,
                });

                //var sensorBuffer = new google.maps.Rectangle({
                //    strokeColor: '#FF0000',
                //    strokeOpacity: 0.8,
                //    strokeWeight: 1,
                //    fillColor: '#FF0000',
                //    fillOpacity: 0.35,
                //    map: map,
                //    bounds: {
                //        north: ,
                //        south: ,
                //        east: ,
                //        west:
                //    }
                //    label: data.name,
                //});


                if (data.aqi >= 151 && data.aqi <= 200) {
                    //var sensorBuffer = new google.maps.Circle({
                    //    strokeColor: '#FF0000',
                    //    strokeOpacity: 0.8,
                    //    strokeWeight: 1,
                    //    fillColor: '#FF0000',
                    //    fillOpacity: 0.35,
                    //    map: map,
                    //    center: myLatlng,
                    //    radius: 300,
                    //    label: data.name,
                    //});
                    var sensorBuffer = new google.maps.Rectangle({
                        strokeColor: '#FF0000',
                        strokeOpacity: 0.8,
                        strokeWeight: 1,
                        fillColor: '#FF0000',
                        fillOpacity: 0.35,
                        map: map,
                        bounds: {
                            north: north,
                            south: south,
                            east: east,
                            west: west
                        }
                        //label: data.name
                    });
                }
                else if (data.aqi >= 101 && data.aqi <= 150) {
                    var sensorBuffer = new google.maps.Circle({
                        strokeColor: '#E17E00',
                        strokeOpacity: 0.8,
                        strokeWeight: 1,
                        fillColor: '#E17E00',
                        fillOpacity: 0.35,
                        map: map,
                        center: myLatlng,
                        radius: 300,
                        label: data.name,
                    });
                }
                else if (data.aqi >= 51 && data.aqi <= 100)
                {
                    var sensorBuffer = new google.maps.Circle({
                        strokeColor: '#E1E100',
                        strokeOpacity: 0.8,
                        strokeWeight: 1,
                        fillColor: '#E1E100',
                        fillOpacity: 0.35,
                        map: map,
                        center: myLatlng,
                        radius: 300,
                        label: data.name,
                    });
                }
                else if (data.aqi >= 30 && data.aqi <= 50) {
                    var sensorBuffer = new google.maps.Circle({
                        strokeColor: '#E1E100',
                        strokeOpacity: 0.8,
                        strokeWeight: 1,
                        fillColor: '#E1E100',
                        fillOpacity: 0.35,
                        map: map,
                        center: myLatlng,
                        radius: 300,
                        label: data.name,
                    });
                }
                else if (data.aqi <= 30) {
                    var sensorBuffer = new google.maps.Circle({
                        strokeColor: '#00E400',
                        strokeOpacity: 0.8,
                        strokeWeight: 1,
                        fillColor: '#00E400',
                        fillOpacity: 0.35,
                        map: map,
                        center: myLatlng,
                        radius: 300,
                        label: data.name,
                    });
                }
            }

          fastRoutePath.setMap(map);
          routePath.setMap(map);
        }



    </script>

    <!--Legend Styling-->
    <style type='text/css'>
        .my-legend .legend-title {
            text-align: left;
            margin-bottom: 5px;
            font-weight: bold;
            font-size: 90%;
        }

        .my-legend .legend-scale ul {
            margin: 0;
            margin-bottom: 5px;
            padding: 0;
            float: left;
            list-style: none;
        }

            .my-legend .legend-scale ul li {
                font-size: 80%;
                list-style: none;
                margin-left: 0;
                line-height: 18px;
                margin-bottom: 2px;
            }

        .my-legend ul.legend-labels li span {
            display: block;
            float: left;
            height: 16px;
            width: 30px;
            margin-right: 5px;
            margin-left: 0;
            border: 1px solid #999;
        }

        .my-legend .legend-source {
            font-size: 70%;
            color: #999;
            clear: both;
        }

        .my-legend a {
            color: #777;
        }
    </style>
    <form action="~/Home/RouteMap" method="post" id="routeMapForm" style="margin-top: 5px;">
        <div class="row" style="margin-bottom: 5px;">
            <div class="col-md-3">
                <div class="btn-group">
                    <input type="hidden" name="startLong" value="@Model.SafeWalkRoute.RouteCoordinates[0].Longitude" />
                    <input type="hidden" name="startLat" value="@Model.SafeWalkRoute.RouteCoordinates[0].Latitude" />
                    <input type="hidden" name="endLong" value="@Model.SafeWalkRoute.RouteCoordinates[Model.SafeWalkRoute.RouteCoordinates.Count - 1].Longitude" />
                    <input type="hidden" name="endLat" value="@Model.SafeWalkRoute.RouteCoordinates[Model.SafeWalkRoute.RouteCoordinates.Count - 1].Latitude" />
                    <input type="submit" name="modeOfT" value="pedestrian" class="btn btn-warning" />
                    <input type="submit" name="modeOfT" value="bicycle" class="btn btn-success" />
                    @selectedModeOfTransportation
                </div>
            </div>
        </div>
    </form>

    <form action="~/Home/FinalMap" method="post" style="margin-top: 5px;">
        <div class="row" style="margin-bottom: 5px;">
            <div class="col-md-3">
                <div class="btn-group">
                    
                    @*<input type="hidden" name="startLong" value="@Model.SafeRoute.RouteCoordinates[0].Longitude" />
                    <input type="hidden" name="startLat" value="@Model.SafeRoute.RouteCoordinates[0].Latitude" />
                    <input type="hidden" name="endLong" value="@Model.SafeRoute.RouteCoordinates[Model.SafeRoute.RouteCoordinates.Count - 1].Longitude" />
                    <input type="hidden" name="endLat" value="@Model.SafeRoute.RouteCoordinates[Model.SafeRoute.RouteCoordinates.Count - 1].Latitude" />
                    <input type="hidden" name="modeOfT" value="@Model.SafeRoute.ModeOfTransportation" />*@
                    <input type="radio" name="FastOrSafe" value="Fast" /> Fast Route
                    <input type="radio" name="FastOrSafe" value="Safe" /> Safe Route
                    <input type="submit" name="finalMap" value="CheckoutMap" class="btn btn-warning" />
                </div>
            </div>
        </div>
    </form>
    <div class='my-legend'>
        <div class='legend-title'>AQI Index</div>
        <div class='legend-scale'>
            <ul class='legend-labels'>
                <li><span style='background:#00E400;'></span>Good</li>
                <li><span style='background:#E1E100;'></span>Moderate</li>
                <li><span style='background:#E17E00;'></span>Unhealthy for Sensitive Groups</li>
                <li><span style='background:#FF0000;'></span>Unhealthy</li>
                <li><span style='background:#8F3F97;'></span>Very Unhealthy</li>
            </ul>
        </div>
        <div class='legend-source'>Source: <a href="#link to source">Name of source</a></div>
    </div>

    @{
        double TotalTime = (double)Model.SafeWalkRoute.TotalTravelTime / 60;
        double Distance = (double)Model.SafeWalkRoute.TotalDistance / 1609;
        double Calories = Distance * 100;
        double Steps = Distance * 1500;
        string ModeOfTransportation = (string)Model.SafeWalkRoute.ModeOfTransportation;

        double FastTotalTime = (double)Model.FastWalkRoute.TotalTravelTime / 60;
        double FastDistance = (double)Model.FastWalkRoute.TotalDistance / 1609;
        double FastCalories = FastDistance * 100;
        double FastSteps = Distance * 1500;
        string FastModeOfTransportation = (string)Model.FastWalkRoute.ModeOfTransportation;

        double BikeTotalTime = (double)Model.SafeBikeRoute.TotalTravelTime / 60;
        double BikeDistance = (double)Model.SafeBikeRoute.TotalDistance / 1609;
        double BikeCalories = BikeDistance * 48;
        double BikeSteps = 0;
        string BikeModeOfTransportation = (string)Model.SafeBikeRoute.ModeOfTransportation;

        double BikeFastTotalTime = (double)Model.FastBikeRoute.TotalTravelTime / 60;
        double BikeFastDistance = (double)Model.FastBikeRoute.TotalDistance / 1609;
        double BikeFastCalories = BikeFastDistance * 48;
        double BikeFastSteps = 0;
        string BikeFastModeOfTransportation = (string)Model.FastBikeRoute.ModeOfTransportation;
    }
    <div class="container">
        <div class="row">
            <div class="col-sm-2">Mode Of T</div>
            <div class="col-sm-4">Walk</div>
            <div class="col-sm-4">Bike</div>
        </div>
        <div class="row">
            <div class="col-sm-2" style="border: solid 1px black; background-color: lightgreen;">Route</div>
            <div class="col-sm-2" style="border: solid 1px black; background-color: lightgreen;">Safe</div>
            <div class="col-sm-2" style="border: solid 1px black; background-color: lightgreen;">Fast</div>
            <div class="col-sm-2" style="border: solid 1px black; background-color: lightgreen;">Safe</div>
            <div class="col-sm-2" style="border: solid 1px black; background-color: lightgreen;">Fast</div>
        </div>
        <div class="row">
            <div class="col-sm-2">Distance</div>
            <div class="col-sm-2">@Distance</div>
            <div class="col-sm-2">@FastDistance</div>
            <div class="col-sm-2">@BikeDistance</div>
            <div class="col-sm-2">@BikeFastDistance</div>
        </div>
        <div class="row">
            <div class="col-sm-2">Time</div>
            <div class="col-sm-2"><p>@TotalTime</p></div>
            <div class="col-sm-2"><p>@FastTotalTime</p></div>
            <div class="col-sm-2">@BikeTotalTime</div>
            <div class="col-sm-2">@BikeFastTotalTime</div>
        </div>
        <div class="row">
            <div class="col-sm-2">Calories</div>
            <div class="col-sm-2"><p>@Calories</p></div>
            <div class="col-sm-2"><p>@FastCalories</p></div>
            <div class="col-sm-2">@BikeCalories</div>
            <div class="col-sm-2">@BikeFastCalories</div>
        </div>
        <div class="row">
            <div class="col-sm-2">Steps</div>
            <div class="col-sm-2"><p>@Steps</p></div>
            <div class="col-sm-2"><p>@FastSteps</p></div>
            <div class="col-sm-2">@BikeSteps</div>
            <div class="col-sm-2">@BikeFastSteps</div>
        </div>
    </div>

    @*<div>
            <img src="https://mde.maryland.gov/programs/Air/AirQualityMonitoring/PublishingImages/Widget/AQI.png" alt="Alternate Text" />
        </div>*@
    <script async defer
            src='https://maps.googleapis.com/maps/api/js?key=@gMaps&callback=initMap'>
        document.getElementById('routeMapForm').addEventListener("click", (e) => {
            this.forms.submit();
        });
    </script>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
</body>
